//var tooltip = new Tooltip(info.el, {
// https://stackoverflow.com/questions/56866108/tooltips-not-working-in-fullcalendar-when-i-use-bootstrap-css

.done is not .then
https://makandracards.com/makandra/39543-jquery-promises-done-and-then-are-not-the-same

cyclic like trying to JSON.stringify(this


unique array values
https://stackoverflow.com/questions/1960473/get-all-unique-values-in-a-javascript-array-remove-duplicates

// usage example:
var myArray = ['a', 1, 'a', 2, '1'];
var unique = myArray.filter((v, i, a) => a.indexOf(v) === i); 

// unique is ['a', 1, 2, '1']

var myArray = ['a', 1, 'a', 2, '1'];

let unique = [...new Set(myArray)]; 



  async function firstFunc (){
                  const thenable = {
                    then: function(resolve, _reject){
                      resolve('resolved')
                    }
                  }
                  return await thenable
                 // console.log(await thenable)
                }
                
               firstFunc().then(val => console.log(val+"!") ) 
              })





                       //let example = async () => { // returns Promise pending until resolved
                  let firstFunc = () => {
                    return new Promise((resolve, reject) => {
                      setTimeout(() => {
                          resolve('Hello');
                      }, 2000);
                    })
                  }

                  let secondFunc = async () => {
                    let y = await firstFunc()
                    console.log('1:' + y)
                    return y
                  }

                  // let x = await secondFunc()

                  // console.log(x)
                    
           
              // }
              // example()

              ---
                async function firstFunc (){   // returns Promise pending until
                   
                    function prom() {
                      return new Promise( (resolve,reject) => {
                        let fetcher = App.getEvents()
                        fetcher().then(data => resolve(data))
                        // resolve(await res)//('resultantas')
                      } )
                    }

                    let foo = () => {
                     return new Promise (
                       (resolve) => resolve(prom())
                     )
                     
                    //  function(resolve,reject){
                    //   setTimeout(() => {
                    //     resolve('Hello');
                    //   }, 2000);
                     }
                          
                
                let secondFunc = async () => {
                  let y = await foo()
                  console.log('1:' + y)
                  return y
                }

                let x = await secondFunc()

                console.log(x)
              
              }

               firstFunc()
              }





              

    //   getFavourites(){
    //     console.log(this.favourites)
    //       return this.favourites
    //   }

    //   checkFavourites(favourites, event) {  // returns T/F
    //     return favourites.some(favourite => favourite.id === event.id) // given story obj is in favs
    // }
